MVC
---
  - Model (app/Model ==> each model represents each table)
  - View (resources/views ==> presentation layer - blade ==> To view UI)
  - Controller (app/Http/Controllers ==> coding process (model ထဲမှာ ရှိနေတဲ့ db table ထဲက data တွေကို  CRUD process လုပ်ပေးတယ်။ view UI ဘက်ကနေ ပေးလိုက်တဲ့ http request တွေကို ခွဲခြမ်းစိတ်ဖြာပြီး သက်ဆိုင်ရာ response ပြန်ပေးတယ် ။))



Start PHP laravel project steps (ref[ laravel.com ])
------------------------------------------------
1. Installing Laravel (ref[ https://laravel.com/docs/7.x/installation ])

2. Check your installation complete
  > call terminal in your laravel project directory, run this command
  > php artisan serve

3. Create Laravel project
  > laravel new project_name

  or Via Composer Create-Project
  > composer create-project --prefer-dist laravel/laravel:^7.0 project_name

4. Run Laravel project
  > php artisan serve

- Show all artisan commands 
  > php artisan list


Routes
-----------
  - routes/web.php
  - ပြချင်တဲ့ page တစ်ခုခြင်းစီအတွက် Route တစ်ခုစီရေးရမယ်
  - ရေးထားသော Route တွေကိုပြန်ကြည့်မယ် (php artisan route:list)
  - (uri, name, action)

Controllers
  - app/Http/Controllers
  - create new controller class (php artsian make:controller MainController)
  - can create methods


SQL Database CRUD process step (ref[ https://laravel.com/docs/7.x/database ])
--------------------------------------
  - create migration (database table)
    > php artisan make:migration create_users_table

  - create model, migrate and controller in one time [** Model name must be Capital letter.]
    > php artisan make:model Item -m -r

  - Before migration, .env file ထဲမှာ database name, http://localhost:8000 စတာတွေဝင်ပြောင်းရမယ်။

  ***** .env file ထဲမှာ ဝင်ပြောင်းပြီးတိုင်း php artisan serve ကို အမြဲ ပြန် run ရမယ်။

  - to create migration table
    > php artisan migrate



------------------------------------------
  Terminal Commands
------------------------------------------
  - php artisan make:model Category -m (model + migration)
  - php artisan make:model Item -m -r (model + migration + resource controller[m-7])
  - php artisan make:controller BrandController --resource --model=Brand (resource controller related model)
  - php artisan migrate:fresh (drop all tables and migrate again)

  - CRUD
    - Create -2 (form, save)
    - Retrieve -1 (display all list)
      - Detail -1 (display only one)
    - Update -2 (form, edit)
    - Delete -1 (delete)

  - Upload File
    - php artisan storage:link


------------------------------------------------
Clone Laravel Project From Git
--------------------------------------------------
- git clone url
- cd folder
- copy .env.example .env
- composer install
- php artisan key:generate




Auth
----
  - composer require laravel/ui:^2.4
  - php artisan ui bootstrap --auth
  - node js install (if you don't have npm module)
  - npm install
  - npm run dev
  - read docs


Middleware Aunthentication steps 
-------------------------------------------
  - role: customer, admin
  - admin page: user is admin role and email verication

1. To install  larravel permisson package ===> ref(https://spatie.be/docs/laravel-permission/v3/installation-laravel)

    > composer require spatie/laravel-permission
    

2. To create migration and config/permission.php file

    > php artisan vendor:publish --provider="Spatie\Permission\PermissionServiceProvider"

  Run this command and you will get these permisson and create_perssion_tables migration files: [\config\permission.php]
  [\database\migrations\2020_12_10_192119_create_permission_tables.php]


3. Run these migration files

    > php artisan migrate



To distingush cutomer role and admin role
-----------------------------------------------
    ref( https://spatie.be/docs/laravel-permission/v3/basic-usage/middleware#package-middleware )

1. You can add this line inside your app/Http/Kernel.php file.

   'role' => \Spatie\Permission\Middlewares\RoleMiddleware::class,



2. Then you can protect your routes using middleware rule in your web.php.

    Route::group(['middleware' => ['role:super-admin']], function () {
    //
    });

    For Eg: For your admin role, you should do like this
    ------------------------------------------------------
    For Eg:   Route::middleware('role:admin')->group(function(){
              // Backend
              Route::get('dashboard', 'BackendController@dashboard')->name('dashboardpage');
              // CRUD
              Route::resource('categories','CategoryController');
          });



3. To define customer role: ref( https://spatie.be/docs/laravel-permission/v3/basic-usage/basic-usage )
-----------------------------------------------------
>>>> You identified admin role in db with id 2, so your register user must be customer role.
>>>> You should assign cutomer role with assignRole('customer') in RegisterController.php

    (1) First, add the Spatie\Permission\Traits\HasRoles trait to your User model(s):
    In user.php,
    -----------------

        use Spatie\Permission\Traits\HasRoles;

        class User extends Authenticatable
        {
            use HasRoles;

            // ...
        }


    (2) And create RoleTableSeeder and add this

	use Spatie\Permission\Models\Role;	

        Role::create(['name' => 'customer']);
        Role::create(['name' => 'admin']);

    (3) And RegisterController.php , define 'customer' assign role

        $user->assignRole('customer');
        return $user;




၁။ user login ဝင်လိုက်တာနဲ့ home page or admin page ကို တစ်ခါတည်းရောက်ချင်ရင် Auth/LoginController ထဲမှာ ဒါထည့်စစ်
----------------------------------------------------------------------- 
protected function redirectTo(){
        $roles = auth()->user()->getRoleNames();

        // Check user role
        switch ($roles[0]) {
            case 'admin':
                return 'dashboard';
                break;
            
            default:
                return '/';
                break;
        }
    }

၂။ user, admin တွေက login ဝင်ထားပြီးတော့ url bar ကနေ localhost:8000/login လို့ခေါ်ရင် တစ်ခါတည်း home page ကို ပြနိုင်ဖို့ middleware/RedirectIfAuthenticated.php ထဲမှာ ဒါထည့်စစ်
--------------------------------------------------------------------------
$roles = auth()->user()->getRoleNames();

// check user role
switch ($roles[0]) {
    case 'admin':
        return redirect()->route('dashboardpage');
        break;
    
    default:
        return redirect()->route('homepage');
        break;
}


****** Laravel component ****
--------------------------------------------
>>>> ထပ်နေတဲ့ view design တွေကို ခနခနပြန်ရေးစရာမလိုဘဲ component ဆောက်ပြီးရေးလို့ရတယ်။
1. to create component
> php artisan make:component AlertComponent
  **** ဒီအပေါ် cmd ကို run လိုက်ရင်....
  ----> app/View/Components/AlertComponent.php (ဒီdirectory အောက်မှာ AlertComponent.php ဆိုပြီး component class တစ်ခုဆောက်သွားမယ်)
  ----> resources/views/components/alert-component.blade.php (ဒီအောက်မှာလည်း component blade file တစ်ဖိုင် ဆောက်ပေးသွားမယ်)

2. - သူဆောက်ပေးလိုက်တဲ့ blade file ထဲမှာ ကိုယ်ရေးချင်တဲ့ view အပိုင်းကိုရေး
   - component class file ထဲမှာ 
	public $data; 
	/** 
	* Create a new component instance. 
	* 
	* @return void 
	*/ 
	public function __construct($data) 
	{ 
		$this->data = $data; 
	} 

3. ပြီးရင် ကိုယ်ခေါ်သုံးချင်တဲ့ blade file ထဲမှာ component blade template ရဲ့နာမည်ကို x ခံပြီးပြန်ခေါ်သုံးလိုက်ရင်ရပြီ
   eg: <x-alert-component :data="$data"></x-alert-component>